# -*- coding: utf-8 -*-
"""module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ctnO2B1YbGqI7GFB9aTNt-wLqQIi9qY
"""

ID = 'id.txt'
with open(ID) as f: ID = f.read()

Secret = 'secret.txt'
with open(Secret) as f: Secret = f.read()
# 인증 정보의 Client Secret

URL = 'url_ocr.txt'
with open(URL) as f: URL = f.read()
# 본인의 APIGW Invoke URL로 치환

key = 'key_ocr.txt'
with open(key) as f: KEY = f.read()
# 본인의 Secret Key로 치환

import pandas as pd 
df = pd.read_csv('의약품효능및복용법_최종.csv')

import pickle
with open('item_list.pickle','rb') as f:
  disease_dict = pickle.load(f)

import pickle
with open('sym_dict.pickle','rb') as fr:
  sym_dict = pickle.load(fr)
  
# Module 1 : 음성파일 >> 질병 텍스트 
def print_voice(voice):
  import json
  import requests
  import re

  data = open(voice, "rb") # STT를 진행하고자 하는 음성 파일

  Lang = "Kor" # Kor / Jpn / Chn / Eng
  URL = "https://naveropenapi.apigw.ntruss.com/recog/v1/stt?lang=" + Lang
      
  headers = {
      "Content-Type": "application/octet-stream", # Fix
      "X-NCP-APIGW-API-KEY-ID": ID,
      "X-NCP-APIGW-API-KEY": Secret,
  }
  response = requests.post(URL,  data=data, headers=headers)
  rescode = response.status_code

  if(rescode == 200):
    symp = response.text
    symps=re.sub('[^ㄱ-ㅎ ㅏ-ㅣ가-힣 ]', '', symp) 
    sym_list = list(symps)
# 자연스러운 언어처리   
    symptom = ''
    for i in range(len(sym_list)):
      symptom += sym_list[i]
      if symptom in disease_dict.keys():
        return symptom
# 자연어 처리 
    for key, value in sym_dict.items():
      for i in value:
        if i == symps:
          return key
  else:
    print("Error : " + response.text)

# Module 2 : 사진파일 >> 텍스트 
def call_picture(pic):
  import json
  import base64
  import requests

  f = open(pic, "rb")
  img = base64.b64encode(f.read())

  headers = {
      "Content-Type": "application/json",
      "X-OCR-SECRET": KEY
  }
      
  data = {
      "version": "V2",
      "requestId": "string",
      "timestamp": 0,         # 현재 시간값
      "lang":"ko",
      "images": [
          {
              "name": "sample_image",
              "format": "png",
              "data": img.decode('utf-8')
            # "templateIds": [400]  # 설정하지 않을 경우, 자동으로 템플릿을 찾음 
          }
      ]
  }
  data = json.dumps(data)
  response = requests.post(URL, data=data, headers=headers)
  res = json.loads(response.text)
  name = res['images'][0]['matchedTemplate']['name']     # 약이름만 추출 
  return name

# Module 3 : 텍스트 >> 음성 
def text_voice(txt):
  import requests

  client_id = ID
  client_secret = ""

  text = txt

  speaker = "nara"
  speed = "0"
  pitch = "0"
  emotion = "0"
  format = "mp3"

  val = {
      "speaker": speaker,
      "speed": speed,
      "text": text
  }

  url = "https://naveropenapi.apigw.ntruss.com/tts-premium/v1/tts"

  headers = {
      "X-NCP-APIGW-API-KEY-ID": ID,
      "X-NCP-APIGW-API-KEY": Secret,
      "Content-Type": "application/x-www-form-urlencoded"
  }

  response = requests.post(url,  data=val, headers=headers)
  rescode = response.status_code

  if(rescode == 200):
      print(rescode)
      with open('cpv_sample.mp3', 'wb') as f:
          f.write(response.content)
  else:
      print("Error : " + response.text)

# Module 4-1 >> 복용법 설명하기 
def call_usage(symptom, name):
  
  symptoms = df[df['증상'] == symptom]                       # 같은 제품이 각가 다른 증상에 포함됨 >> 구분
  info = symptoms[symptoms['제품명'].str.contains(name)]      # 제품이 포함한 정보 찾기 
  usage = info['복용법'].to_list()
  usages = ' ,'.join(map(str, usage))
  return usages

# Module 4-2 >> 증상에 맞는 약품 추천하기 
def recommend_itmes(symptom):

  recommend = df[df['증상']==symptom]
  recommend['length'] = recommend['효능'].str.count('')+1
  recommend.sort_values(by='length', ascending=False, inplace=True)
  item_list= recommend['제품명'][:5].tolist()
  items = ' ,'.join(map(str, item_list))
  return items



